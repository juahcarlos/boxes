# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: db.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.protobuf.timestamp_pb2
import db_pb2

from dataclasses import dataclass
from datetime import datetime
from typing import List, Optional

import betterproto
import grpclib


class RequestStatus(betterproto.Enum):
    OK = 0
    ERROR = 1


@dataclass
class Box(betterproto.Message):
    name: str = betterproto.string_field(1)
    id: int = betterproto.int32_field(2)
    price: int = betterproto.int32_field(3)
    description: str = betterproto.string_field(4)
    category: str = betterproto.string_field(5)
    quantity: int = betterproto.int32_field(6)
    created_at: datetime = betterproto.message_field(7)


@dataclass
class GetBoxRequest(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass
class GetBoxResponse(betterproto.Message):
    box: "Box" = betterproto.message_field(1)
    status: "RequestStatus" = betterproto.enum_field(2)


@dataclass
class GetAllBoxesRequest(betterproto.Message):
    pass


@dataclass
class GetBoxesResponse(betterproto.Message):
    box: List["Box"] = betterproto.message_field(1)
    status: "RequestStatus" = betterproto.enum_field(2)


@dataclass
class CreateBoxRequest(betterproto.Message):
    box: "Box" = betterproto.message_field(1)


@dataclass
class CreateBoxResponse(betterproto.Message):
    status: "RequestStatus" = betterproto.enum_field(1)


@dataclass
class UpdateBoxRequest(betterproto.Message):
    box: "Box" = betterproto.message_field(1)


@dataclass
class UpdateBoxResponse(betterproto.Message):
    status: "RequestStatus" = betterproto.enum_field(1)


@dataclass
class DeleteBoxRequest(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass
class DeleteBoxResponse(betterproto.Message):
    status: "RequestStatus" = betterproto.enum_field(1)


@dataclass
class GetBoxesInCategoryRequest(betterproto.Message):
    category: str = betterproto.string_field(1)


@dataclass
class GetBoxesInTimeRangeRequest(betterproto.Message):
    start_time: datetime = betterproto.message_field(1)
    end_time: datetime = betterproto.message_field(2)


class DatabaseServiceStub(betterproto.ServiceStub):
    async def get_box(self, *, id: int = 0) -> GetBoxResponse:
        print('DatabaseServiceStub')
        request = GetBoxRequest()
        request.id = id

        return await self._unary_unary(
            "/.DatabaseService/GetBox", request, GetBoxResponse
        )

    async def get_boxes(self) -> GetBoxesResponse:
        request = GetAllBoxesRequest()

        return await self._unary_unary(
            "/.DatabaseService/GetBoxes", request, GetBoxesResponse
        )

    async def create_box(self, *, box: Optional["Box"] = None) -> CreateBoxResponse:
        request = CreateBoxRequest()
        if box is not None:
            request.box = box

        return await self._unary_unary(
            "/.DatabaseService/CreateBox", request, CreateBoxResponse
        )

    async def update_box(self, *, box: Optional["Box"] = None) -> UpdateBoxResponse:
        request = UpdateBoxRequest()
        if box is not None:
            request.box = box

        return await self._unary_unary(
            "/.DatabaseService/UpdateBox", request, UpdateBoxResponse
        )

    async def delete_box(self, *, id: int = 0) -> DeleteBoxResponse:
        request = DeleteBoxRequest()
        request.id = id

        return await self._unary_unary(
            "/.DatabaseService/DeleteBox", request, DeleteBoxResponse
        )

    async def get_boxes_in_category(self, *, category: str = "") -> GetBoxesResponse:
        request = GetBoxesInCategoryRequest()
        request.category = category

        return await self._unary_unary(
            "/.DatabaseService/GetBoxesInCategory", request, GetBoxesResponse
        )

    async def get_boxes_in_time_range(
        self,
        *,
        start_time: Optional[datetime] = None,
        end_time: Optional[datetime] = None,
    ) -> GetBoxesResponse:
        request = GetBoxesInTimeRangeRequest()
        if start_time is not None:
            request.start_time = start_time
        if end_time is not None:
            request.end_time = end_time

        return await self._unary_unary(
            "/.DatabaseService/GetBoxesInTimeRange", request, GetBoxesResponse
        )








class DatabaseServiceBase(abc.ABC):

    @abc.abstractmethod
    async def GetBox(self, stream: 'grpclib.server.Stream[db_pb2.GetBoxRequest, db_pb2.GetBoxResponse]') -> None:
        pass
    
    @abc.abstractmethod
    async def GetBoxes(self, stream: 'grpclib.server.Stream[db_pb2.GetAllBoxesRequest, db_pb2.GetBoxesResponse]') -> None:
        pass
    
    @abc.abstractmethod
    async def CreateBox(self, stream: 'grpclib.server.Stream[db_pb2.CreateBoxRequest, db_pb2.CreateBoxResponse]') -> None:
        pass
    
    @abc.abstractmethod
    async def UpdateBox(self, stream: 'grpclib.server.Stream[db_pb2.UpdateBoxRequest, db_pb2.UpdateBoxResponse]') -> None:
        pass
    
    @abc.abstractmethod
    async def DeleteBox(self, stream: 'grpclib.server.Stream[db_pb2.DeleteBoxRequest, db_pb2.DeleteBoxResponse]') -> None:
        pass
    
    @abc.abstractmethod
    async def GetBoxesInCategory(self, stream: 'grpclib.server.Stream[db_pb2.GetBoxesInCategoryRequest, db_pb2.GetBoxesResponse]') -> None:
        pass
    
    @abc.abstractmethod
    async def GetBoxesInTimeRange(self, stream: 'grpclib.server.Stream[db_pb2.GetBoxesInTimeRangeRequest, db_pb2.GetBoxesResponse]') -> None:
        pass
    ''''''
    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/DatabaseService/GetBox': grpclib.const.Handler(
                self.GetBox,
                grpclib.const.Cardinality.UNARY_UNARY,
                db_pb2.GetBoxRequest,
                db_pb2.GetBoxResponse,
            ),
            '/DatabaseService/GetBoxes': grpclib.const.Handler(
                self.GetBoxes,
                grpclib.const.Cardinality.UNARY_UNARY,
                db_pb2.GetAllBoxesRequest,
                db_pb2.GetBoxesResponse,
            ),  
            '/DatabaseService/CreateBox': grpclib.const.Handler(
                self.CreateBox,
                grpclib.const.Cardinality.UNARY_UNARY,
                db_pb2.CreateBoxRequest,
                db_pb2.CreateBoxResponse,
            ),
            '/DatabaseService/UpdateBox': grpclib.const.Handler(
                self.UpdateBox,
                grpclib.const.Cardinality.UNARY_UNARY,
                db_pb2.UpdateBoxRequest,
                db_pb2.UpdateBoxResponse,
            ),
            '/DatabaseService/DeleteBox': grpclib.const.Handler(
                self.DeleteBox,
                grpclib.const.Cardinality.UNARY_UNARY,
                db_pb2.DeleteBoxRequest,
                db_pb2.DeleteBoxResponse,
            ),   
            '/DatabaseService/GetBoxesInCategory': grpclib.const.Handler(
                self.GetBoxesInCategory,
                grpclib.const.Cardinality.UNARY_UNARY,
                db_pb2.GetBoxesInCategoryRequest,
                db_pb2.GetBoxesResponse,
            ),        
            '/DatabaseService/GetBoxesInTimeRange': grpclib.const.Handler(
                self.GetBoxesInTimeRange,
                grpclib.const.Cardinality.UNARY_UNARY,
                db_pb2.GetBoxesInTimeRangeRequest,
                db_pb2.GetBoxesResponse,
            ),            
        }


class DatabaseServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GetBox = grpclib.client.UnaryUnaryMethod(
            channel,
            '/DatabaseService/GetBox',
            db_pb2.GetBoxRequest,
            db_pb2.GetBoxResponse,
        )
        self.GetBoxes = grpclib.client.UnaryUnaryMethod(
            channel,
            '/DatabaseService/GetBoxes',
            db_pb2.GetAllBoxesRequest,
            db_pb2.GetBoxesResponse,
        )
        self.CreateBox = grpclib.client.UnaryUnaryMethod(
            channel,
            '/DatabaseService/CreateBox',
            db_pb2.CreateBoxRequest,
            db_pb2.CreateBoxResponse,
        )
        self.UpdateBox = grpclib.client.UnaryUnaryMethod(
            channel,
            '/DatabaseService/UpdateBox',
            db_pb2.UpdateBoxRequest,
            db_pb2.UpdateBoxResponse,
        )
        self.DeleteBox = grpclib.client.UnaryUnaryMethod(
            channel,
            '/DatabaseService/DeleteBox',
            db_pb2.DeleteBoxRequest,
            db_pb2.DeleteBoxResponse,
        )
        self.GetBoxesInCategory = grpclib.client.UnaryUnaryMethod(
            channel,
            '/DatabaseService/GetBoxesInCategory',
            db_pb2.GetBoxesInCategoryRequest,
            db_pb2.GetBoxesResponse,
        )
        self.GetBoxesInTimeRange = grpclib.client.UnaryUnaryMethod(
            channel,
            '/DatabaseService/GetBoxesInTimeRange',
            db_pb2.GetBoxesInTimeRangeRequest,
            db_pb2.GetBoxesResponse,
        )
















"""

"""